{"version":3,"sources":["components/ZipSearch.js","components/CitySearch.js","App.js","reportWebVitals.js","index.js"],"names":["ZipSearch","props","state","zipcode","invalid","myData","noResponse","handleInputChange","bind","fetch","this","then","res","json","data","console","log","setState","catch","e","length","validResponse","className","map","currentZip","LocationText","State","Lat","Long","EstimatedPopulation","TotalWages","invalidResponse","type","placeholder","defaultValue","onChange","target","value","Component","CitySearch","city","resData","query","trim","toUpperCase","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.597a5a93.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\n/*\nFunction takes in Zipcode\ntakes in the user zipcode \nMARK: we need a second parameter to change the zipcode\n*/\nclass ZipSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      zipcode: \"\",\n      invalid: true,\n      myData: [],\n      noResponse: false,\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  // This goes and fetches city information based on the value in this.state.zipcode\n  // Note: this state value is updated whenever the value of the text input changes\n  // Runs everytime setState is called.\n  componentDidUpdate() {\n    fetch(\"https://ctp-zip-api.herokuapp.com/zip/\" + this.state.zipcode)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data);\n        this.setState({ myData: data, noResponse: false });\n      })\n      .catch((e) => {\n        this.setState({ noResponse: true });\n        console.log(\"Error:\", e);\n      });\n  }\n\n  //this gets called whenever the text field changes\n  handleInputChange(e) {\n    //Modified\n    if (e.length === 5) {\n      this.setState({ zipcode: e, invalid: false, myData: [] });\n    } else {\n      this.setState({ zipcode: e, invalid: true, myData: [] });\n    }\n  }\n\n  /*MARK: we need to put a constructor for an array \n  of the cities to return the multiple cities from that zipcode\n  after we create constructor, below that we are going to grab value of zipcode.\n  when we grab the value of the zipcode, we have to check if its 5 char. long \n  */\n  //REF TO LINE 53 we have to do the same thing for another variable change in that field\n  /*REF TO LINE before 60, have to check the length of the given zip, if its  = 0 (nothing) return no results, \n otherwise return city component\n \t\t\t  <input name=\"someUniqueName\" value={this.state.someState} onChange={this.handleInputChange} />\n\n\t\t\t  \n\t\t\t  */\n  render() {\n    let validResponse = (\n      <div className=\"inline-block\">\n        {this.state.myData.map((currentZip) => (\n          <div className=\"p-3\">\n            <table className=\"border-black border\">\n              <tr>\n                <td className=\"border-black border px-10 font-bold bg-gray-200\">\n                  {currentZip.LocationText}\n                </td>\n              </tr>\n              <tr>\n                <td className=\"border-black border px-10\">\n                  State: {currentZip.State}\n                </td>\n              </tr>\n              <tr>\n                <td className=\"border-black border px-10\">\n                  Location: ({currentZip.Lat}, {currentZip.Long}){\" \"}\n                </td>\n              </tr>\n              <tr>\n                <td className=\"border-black border px-10\">\n                  Population (estimated): {currentZip.EstimatedPopulation}\n                </td>\n              </tr>\n              <tr>\n                {\" \"}\n                <td className=\"border-black border px-10\">\n                  Total Wages: {currentZip.TotalWages}\n                </td>\n              </tr>\n            </table>\n          </div>\n        ))}\n      </div>\n    );\n\n    let invalidResponse = <div>No Results. </div>;\n\n    return (\n      <div>\n        <form className=\"form-inline my-4\">\n          <label>\n            Enter Zip Code: <br />\n          </label>\n          <input\n            type=\"text\"\n            placeholder=\"10065\"\n            defaultValue={this.state.zipcode}\n            onChange={(e) => this.handleInputChange(e.target.value)}\n            className=\"border-2 border-black rounded-md px-2 text-center m-2\"\n          />\n        </form>\n        {this.state.invalid || this.state.noResponse ? invalidResponse : validResponse}\n      </div>\n    );\n  }\n}\n\nexport default ZipSearch;\n","import React, { Component } from \"react\";\n\nclass CitySearch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      city: \"\",\n      resData: [],\n    };\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  // This goes and fetches zip code information based on the value in this.state.city\n  // Note: this state value is updated whenever the value of the text input changes\n  // Runs everytime setState is called.\n  componentDidUpdate() {\n    fetch(\"https://ctp-zip-api.herokuapp.com/city/\" + this.state.city)\n      .then((res) => res.json())\n      .then((data) => {\n        this.setState({ resData: data});\n      })\n      .catch((e) => {\n        console.log(\"Error:\", e);\n        //Modified - to account for extra characters\n        //this.setState({resData: []});\n      });\n  }\n\n  handleInputChange(e) {\n    let query = e.trim().toUpperCase();\n    this.setState({resData: [], city: query})\n  }\n\n  /*MARK: we need to put a constructor for an array \n  of the cities to return the multiple cities from that zipcode\n  after we create constructor, below that we are going to grab value of zipcode.\n  when we grab the value of the zipcode, we have to check if its 5 char. long \n  */\n  //REF TO LINE 53 we have to do the same thing for another variable change in that field\n  /*REF TO LINE before 60, have to check the length of the given zip, if its  = 0 (nothing) return no results, \n otherwise return city component\n \t\t\t  <input name=\"someUniqueName\" value={this.state.someState} onChange={this.handleInputChange} />\n\n\t\t\t  */\n  render() {\n    let validResponse = (\n      <div className=\"grid grid-cols-5 gap-4\">\n        {this.state.resData.map((zipcode) => (\n          <div className=\"border-2\"> { zipcode } </div>\n        ))}\n      </div>\n    );\n\n    let invalidResponse = <div>No Results. </div>;\n\n    return (\n      <div>\n        <form className=\"form-inline my-4\">\n          <label>\n            Enter City Name: <br />\n          </label>\n          <input\n            type=\"text\"\n            placeholder=\"Sushi City\"\n            defaultValue={this.state.city}\n            onChange={(e) => this.handleInputChange(e.target.value)}\n            className=\"border-2 border-black rounded-md px-2 text-center m-2\"\n          />\n        </form>\n        {this.state.resData.length === 0 ? invalidResponse : validResponse}\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;\n","import React, { Component } from \"react\";\nimport \"./index.css\";\nimport ZipSearch from \"./components/ZipSearch\";\nimport CitySearch from \"./components/CitySearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div className=\"bg-black text-white text-center\">\n          <h1 className=\"text-3xl p-2 m-0\">Zip Code Search</h1>\n          <h3 className=\"p-2 m-0\"> by Team Foodies </h3>\n        </div>\n        <div className=\"text-center\">\n          <ZipSearch />\n          <CitySearch />\n        </div>\n        <br />\n        <hr />\n        <br />\n        <div className=\"text-center\">\n          ❤️ Brought to you by Team Food: Samantha Ngo, Gabby Gonzalez, Nirmala\n          Kuhl, Kristy Lau ❤️ <br />\n          April 2021\n          <br /><br />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}